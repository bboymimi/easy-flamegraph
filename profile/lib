#!/bin/bash

APPEND_STRINGS=""
GREP_STRINGS=""
PERF_DATA_FINAL=""
PFOLDED_SUM="${FPERF}/stack_sum"
PFOLDED_SUM_FINAL="${FPERF}/callstack_sum_final"
PFOLDED_SUM_FINAL_SVG="${FPERF}/callstack_sum_final.svg"

declare -A stack_array

debug_log() {
	if "$EASY_FLAME_LOG_ENABLE"; then
		if "$EASY_FLAME_LOG_FILE"; then
			echo "$1" >> "$EASY_FLAME_LOG"
		fi
		if "$EASY_FLAME_LOG_CONSOLE"; then
			echo "$1"
		fi
	fi
}

required_tools_checking() {
	# return if the component needs the package is not enabled
	if ! "$2"; then
		debug_log "Ignore the installation of: $1"
		return
	fi

	# exit if required package is not installed
	CHK_PKG=$(dpkg-query -W -f='${Status}' "$1" 2>/dev/null | grep -c "ok installed")
	if [ "$CHK_PKG" -eq 0 ]; then
		debug_log "Please install: $1"
		#apt install -y "$1"
		exit 1
	fi
}

clean_probe_points() {
	debug_log "Clean up the probe points"
	probe_points=$(perf probe -l | awk '{print $1}')
	for i in $probe_points; do
		perf probe -d "$i"
	done
}

perf_collect() {
	local cond_type="$1"
	local ext="$2"
	local title="$3"
	local subtitle="$4"
	local event="$5"

	# create output directory for different type
	output_dir="$EASY_FLAME_OUTPUT"/"$cond_type"
	mkdir -p "$output_dir"

	# set default values
	if [ -z "$G_SRATE" ]; then
		G_SRATE=99
	fi

	if "$G_KEEP_SVG"; then
		KEEP_SVG_OPTION="-d"
	elif "$G_KEEP_TAR"; then
		KEEP_SVG_OPTION="-t"
	else
		KEEP_SVG_OPTION=""
	fi	

	# set perf command
	PERF_TMP_CMD="perf record $KMEM_APPEND $GLIBC_APPEND $TCMALLOC_APPEND -a -F $G_SRATE --call-graph dwarf"

	if [ -n "$G_PID" ]; then
	       	PERF_TMP_CMD="$PERF_TMP_CMD -p $G_PID"
	fi

	# add global events
	if [ -n "$G_EVENT" ]; then
		PERF_TMP_CMD="$PERF_TMP_CMD $G_EVENT"
	fi

	# add type specific events
	if [ -n "$event" ]; then
		PERF_TMP_CMD="$PERF_TMP_CMD $event"
	fi

	# add user define events
	if [ -n "$G_USER_EVENT" ]; then
		IFS=',' read -ra user_events <<< "$G_USER_EVENT"
		for user_event in "${user_events[@]}"; do
			PERF_PROBE_CMD="perf probe"
			IFS=' ' read -ra user_params <<< "$user_event"
			for user_param in "${user_params[@]}"; do
				PERF_PROBE_CMD="$PERF_PROBE_CMD $user_param"
			done
			debug_log "define probe: $PERF_PROBE_CMD"
			$PERF_PROBE_CMD &> /dev/null || return
		done

		for event in $(perf probe -l | grep -P '\s*probe:' | awk '{print $1}'); do
			debug_log "add probe: $event"
			PERF_TMP_CMD="$PERF_TMP_CMD -e $event"
		done

	fi

	[[ $GREP_STRINGS != "" ]] && PERF_TMP_CMD="$PERF_TMP_CMD -p $(pgrep "$GREP_STRINGS")"

	DATE=$(date +%Y-%m-%d_%H%M%S)

	# perf.data location
	PERF_DATA_FINAL="$EASY_FLAME_PERF_DIR/$DATE.$cond_type.$ext"

	# press ctrl+c when you want to stop the profiling
	PERF_CMD="$PERF_TMP_CMD -o $PERF_DATA_FINAL sleep $G_PERF_PERIOD"

	# we can enable additional sysinfo to collect before perf record
	if ! "$USE_SYSINFO_PERIODICALLY"; then
		debug_log "Run scripts in $EASY_FLAME_SYSINFO_DIR"
		for sysinfo_script in "$EASY_FLAME_SYSINFO_DIR"/*; do
			if [ -f "$sysinfo_script" ] && [ -x "$sysinfo_script" ]; then
				debug_log "Script: $(basename "$sysinfo_script")"
				bash "$sysinfo_script" "$EASY_FLAMEGRAPH_DEFAULT"
			fi
		done
	fi

	debug_log "CMD: $PERF_CMD"

	# Profiling the system
	$PERF_CMD &> /dev/null || return

	debug_log "Generating flamegraph"
	if "$G_PER_CPU_FLAMEGRAPH"; then
		debug_log "Generating per cpu flamegraph"
	fi
	#SUBTITLE="${DATE} CPU Threshold:${CPU_THRESHOLD}% CPU Utilization:${CPU_UTILIZATION}%"
	#(
		# Generate the flamegraph
		"$EASY_FLAME_LIB_DIR"/gen-flamegraph.sh -i "$PERF_DATA_FINAL" "$KEEP_SVG_OPTION" \
			-o "$output_dir" --title "$title" --subtitle "$subtitle" \
			-p "$G_PER_CPU_FLAMEGRAPH" >> "$EASY_FLAME_LOG" 2>&1

		# clean up the perf.data
		if $G_KEEP_SVG; then
			rm "$PERF_DATA_FINAL"
		else
			if [ -e "$output_dir"/"$(basename "$PERF_DATA_FINAL")".zip ]; then
				echo "Append $PERF_DATA_FINAL to $output_dir/$(basename "$PERF_DATA_FINAL").zip"
				# tar.gz is generated by easy-flamegraph.sh and append the perf.data in.
				zip -u "$output_dir"/"$(basename "$PERF_DATA_FINAL")".zip "$PERF_DATA_FINAL"
				rm "$PERF_DATA_FINAL"
			fi

		fi
	#) &

	wait
}

merge_all_flamegraphs() {
	# rm the PFOLDED_SUM if exist to avoid the overlay of previous time
	[ ! -s "$PFOLDED_SUM" ] && echo "Aggregated graph is empty! No perf data captured!" && return

	DATE=$(date +%Y-%m-%d_%H%M%S)

	NAME=${DATE}
	[[ $APPEND_STRINGS != "" ]] && NAME=${NAME}.${APPEND_STRINGS}
	[[ $G_PID != "" ]] && NAME=${NAME}.${G_PID}

	# recalculate the counts make the summarized flamegraph
	while read -r callstack_counts; do
		counts=$(echo "$callstack_counts" |perl -n -e '/(\d)+$/; print $&;')
		callstack=$(echo "$callstack_counts" |perl -n -e '/(.*) (\d)+$/; print $1;')
		stack_array[$callstack]=$((${stack_array[$callstack]} + counts))
	done < "$PFOLDED_SUM"

	[ -f "${PFOLDED_SUM_FINAL}" ] && rm "${PFOLDED_SUM_FINAL}"
	for stack in "${!stack_array[@]}"; do
		echo "$stack ${stack_array[$stack]}" >> "$PFOLDED_SUM_FINAL"
	done

	"$FPATH"flamegraph.pl "$PFOLDED_SUM_FINAL" > "$PFOLDED_SUM_FINAL_SVG"
}

clean_intermediate_files() {
	[ -f "${PFOLDED_SUM}" ] && rm "${PFOLDED_SUM}"
	[ -f "${PFOLDED_SUM_FINAL}" ] && rm "${PFOLDED_SUM_FINAL}"
}
[ "$(id -u)" -ne 0 ] && echo "Must be root!!" && exit 1

kill_child_processes() {

    local isTopmost=$1
    local curPid=$2
    local childPid

    childPids=$(ps -o pid --no-headers --ppid "$curPid")
    # echo child of ${curPid}: ${childPids}

    for childPid in $childPids; do
        kill_child_processes 0 "$childPid"
    done

    if [ "$isTopmost" -eq 0 ]; then
        # echo kill -9 $curPid
	kill -9 "$curPid" &> /dev/null
    fi
}

exit_work() {

	# clean the probe point after profiling the system
	clean_probe_points

	# merge all flamegraphs to form a bigger picture
	# TODO: disable the merge_all_flamegraphs temporarily until better
	# ideas come.

	# merge_all_flamegraphs

	# clean up all the intermediate files
	[ "$G_KEEP_SVG" ] && clean_intermediate_files

	kill_child_processes 1 $$

	# kill -9 $(ps -9 pgid= $$) can do the trick to kill the process group too.
	#PGID=$(ps -o pgid= $$)

	## Kill needs to be done in a new process group to avoid killing itself.
	#setsid kill -- -$PGID

	exit 0
}
