#!/bin/bash

collect_info() {
	output_dir="$EASY_FLAME_OUTPUT"/bcache
	mkdir -p "$output_dir"

	date_sys=$(date '+%Y.%m.%d-%H.%M.%S')

	# collect backing devices info
	for dev in /sys/block/*; do
		bcache=$(basename "$dev" | grep bcache)
		if [ -z "$bcache" ]; then
			continue
		fi

		bdev=$(readlink -f "$dev"/bcache | awk -F '/' '{print $(NF-1)}')
		debug_log "Collect bcache info: $bcache ($bdev)"
		output_file="$output_dir"/"$bcache".csv

		cache_mode=$(awk -F '[' '{print $2}' "$dev"/bcache/cache_mode | awk -F ']' '{print $1}')
		state=$(cat "$dev"/bcache/state)
		io_error_limit=$(cat "$dev"/bcache/io_error_limit)
		sequential_cutoff=$(cat "$dev"/bcache/sequential_cutoff)
		writeback_percent=$(cat "$dev"/bcache/writeback_percent)

		errors=$(cat "$dev"/bcache/errors)
		dirty_data=$(cat "$dev"/bcache/dirty_data)
		readahead=$(cat "$dev"/bcache/readahead)
		bypassed=$(cat "$dev"/bcache/stats_total/bypassed)
		cache_hit_ratio=$(cat "$dev"/bcache/stats_total/cache_hit_ratio)

		if ! [ -f "$output_file" ]; then
			echo "date,cache_mode,state,io_error_limit,sequential_cutoff,writeback_percent,errors,dirty_data,readahead,bypassed,cache_hit_ratio" > "$output_file"
		fi

		echo "$date_sys,$cache_mode,$state,$io_error_limit,$sequential_cutoff,$writeback_percent,$errors,$dirty_data,$readahead,$bypassed,$cache_hit_ratio" >> "$output_file"
	done

	# collect cache devices info
	if ! [ -d "/sys/fs/bcache" ]; then
		return
	fi

	for cache in /sys/fs/bcache/*; do
		uuid=$(basename "$cache")
		if [ "$uuid" != "register" ] && [ "$uuid" != "register_quiet" ]; then
			cdev=$(readlink -f "$cache"/cache0 | awk -F '/' '{print $(NF-1)}')
			debug_log "Collect cache info: $cdev"
			output_file="$output_dir"/"$cdev".csv

			block_size=$(cat "$cache"/block_size)
			btree_cache_size=$(cat "$cache"/btree_cache_size)
			bucket_size=$(cat "$cache"/bucket_size)
			io_error_limit=$(cat "$cache"/io_error_limit)
			tree_depth=$(cat "$cache"/tree_depth)
			congested_read_threshold_us=$(cat "$cache"/congested_read_threshold_us)
			congested_write_threshold_us=$(cat "$cache"/congested_write_threshold_us)
			congested=$(cat "$cache"/congested)
			io_errors=$(cat "$cache"/cache0/io_errors)
			btree_written=$(cat "$cache"/cache0/btree_written)
			metadata_written=$(cat "$cache"/cache0/metadata_written)
		fi

		if ! [ -f "$output_file" ]; then
			echo "date,block_size,btree_cache_size,bucket_size,io_error_limi,tree_depth,congested_read_threshold_us,congested_write_threshold_us,congested,io_errors,btree_written,metadata_written" > "$output_file"
		fi

		echo "$date_sys,$block_size,$btree_cache_size,$bucket_size,$io_error_limit,$tree_depth,$congested_read_threshold_us,$congested_write_threshold_us,$congested,$io_errors,$btree_written,$metadata_written" >> "$output_file"
	done
}

# Config file
if [ -n "$1" ] && [ -r "$1" ]; then
	EASY_FLAMEGRAPH_DEFAULT="$1"
else
	echo "Unable to read config file $1"
	exit 1
fi

[ -r "$EASY_FLAMEGRAPH_DEFAULT" ] && . "$EASY_FLAMEGRAPH_DEFAULT"

if ! $USE_EASY_FLAMEGRAPH; then
	exit 0
fi

# source lib
[ -r "$EASY_FLAME_LIB_DIR"/lib ] && . "$EASY_FLAME_LIB_DIR"/lib

if ! "$USE_BCACHE"; then
	debug_log "USE_BCACHE: disabled"
	exit 0
fi

debug_log "USE_BCACHE: enabled"

# for collecting info, we can run it in background
collect_info
