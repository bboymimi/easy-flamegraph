#!/bin/bash

# Config file
EASY_FLAMEGRAPH_DEFAULT=/etc/default/easy-flamegraph.conf

[ -r $EASY_FLAMEGRAPH_DEFAULT ] && . $EASY_FLAMEGRAPH_DEFAULT

if ! $USE_EASY_FLAMEGRAPH; then
	exit 0
fi

# source lib
[ -r "$EASY_FLAME_LIB_DIR"/lib ] && . "$EASY_FLAME_LIB_DIR"/lib

# run all scripts in conditions dir
DATE_SYS=$(date '+%Y.%m.%d-%H.%M.%S')
DATE_UTC=$(date -u '+%Y.%m.%d-%H.%M.%S')
debug_log "-------------------------------------------------------"
debug_log "Start time:"
debug_log "System: $DATE_SYS"
debug_log "UTC: $DATE_UTC"

# check if the required tool(s) is installed. e.g. linux-tools-common.
required_tools_checking linux-tools-common
required_tools_checking linux-tools-"$(uname -r)"
required_tools_checking binutils
required_tools_checking zip
required_tools_checking sysstat

debug_log "Run scripts in $EASY_FLAME_COND_DIR"
for cond_script in "$EASY_FLAME_COND_DIR"/*; do
	if [ -f "$cond_script" ] && [ -x "$cond_script" ]; then
		debug_log "Run $cond_script"
		bash "$cond_script"
	fi
done

exit 0

if $USE_MEM; then
	if [ x"$EASY_FLAME_OUTPUT" != x"" ]; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD -o $EASY_FLAME_OUTPUT/mem"
	fi

	if [ x"$USE_MEM_PID" != x"" ]; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD -p $USE_MEM_PID"
	fi

	if [ x"$USE_MEM_THRESHOLD_SIZE" != x"" ]; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD -s $USE_MEM_THRESHOLD_SIZE"
	fi

	if $USE_MEM_TAR; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD -t"
	fi

	if $USE_MEM_GLIBC; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD --glibc"
	fi

	if $USE_MEM_SVG; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD --keep-svg"
	fi

	if $USE_MEM_KMEM; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD --kmem"
	fi

	if [ x"$USE_MEM_SRATE" != x"" ]; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD --sample-rate $USE_MEM_SRATE"
	fi

	if $USE_MEM_TCMALLOC; then
		FLAME_MEM_CMD="$FLAME_MEM_CMD --tcmalloc"
	fi

	$FLAME_MEM_CMD  &
fi

if $USE_CPU; then
	if [ x"$EASY_FLAME_OUTPUT" != x"" ]; then
		FLAME_CPU_CMD="$FLAME_CPU_CMD -o $EASY_FLAME_OUTPUT/cpu"
	fi

	if [ x"$USE_CPU_PID" != x"" ]; then
		FLAME_CPU_CMD="$FLAME_CPU_CMD -p $USE_CPU_PID"
	fi

	case $USE_CPU_SVG in
		tar)
			FLAME_CPU_CMD="$FLAME_CPU_CMD -t"
			;;
		svg)
			FLAME_CPU_CMD="$FLAME_CPU_CMD --keep-svg"
			;;
	esac

	if [ x"$CPU_THRESHOLD" != x"" ]; then
		FLAME_CPU_CMD="$FLAME_CPU_CMD --cpu-threshold $CPU_THRESHOLD"
	fi

	if [ x"$USE_CPU_SRATE" != x"" ]; then
		FLAME_CPU_CMD="$FLAME_CPU_CMD --sample-rate $USE_CPU_SRATE"
	fi

	if $PER_CPU_FLAMEGRAPH; then
		FLAME_CPU_CMD="$FLAME_CPU_CMD --per-cpu-flamegraph"
	fi

	$FLAME_CPU_CMD &
fi

if $USE_IO; then
	if [ x"$EASY_FLAME_OUTPUT" != x"" ]; then
		FLAME_IO_CMD="$FLAME_IO_CMD -o $EASY_FLAME_OUTPUT/io"
	fi

	if [ x"$USE_IO_PID" != x"" ]; then
		FLAME_IO_CMD="$FLAME_IO_CMD -p $USE_IO_PID"
	fi

	case $USE_IO_SVG in
		tar)
			FLAME_IO_CMD="$FLAME_IO_CMD -t"
			;;
		svg)
			FLAME_IO_CMD="$FLAME_IO_CMD --keep-svg"
			;;
	esac

	if [ x"$USE_IO_DISK" != x"" ]; then
		FLAME_IO_CMD="$FLAME_IO_CMD --disk $USE_IO_DISK"
	fi

	if [ x"$READ_THRESHOLD" != x"" ]; then
		FLAME_IO_CMD="$FLAME_IO_CMD --read-threshold $READ_THRESHOLD"
	fi

	if [ x"$WRITE_THRESHOLD" != x"" ]; then
		FLAME_IO_CMD="$FLAME_IO_CMD --write-threshold $WRITE_THRESHOLD"
	fi

	if [ x"$USE_IO_SRATE" != x"" ]; then
		FLAME_IO_CMD="$FLAME_IO_CMD --sample-rate $USE_IO_SRATE"
	fi

	$FLAME_IO_CMD &
fi
